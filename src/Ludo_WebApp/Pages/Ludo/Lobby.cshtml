@page "{id:int?}"
@model Ludo_WebApp.Pages.Ludo.LobbyModel
@{
}

@* --- Error Messages ------------------------------- *@

@Html.ValidationMessageFor(m => m.ModelState["Error.Lobby.OnGetAsync.GetGameboardDTO"])
@Html.ValidationMessageFor(m => m.ModelState["Error.Lobby.OnGetAsync.GetLudoData"])
@Html.ValidationMessageFor(m => m.ModelState["Error.Lobby.OnGetAsync.GetLudoData"])
@Html.ValidationMessageFor(m => m.ModelState["Error.Lobby.OnPost.NewGame.Debug"])

@Html.ValidationMessageFor(m => m.ModelState["Error.Lobby.OnGetAsync.GetGameboardDTO.Debug"])
@Html.ValidationMessageFor(m => m.ModelState["Error.Lobby.OnGetAsync.GetLudoData.Debug"])
@Html.ValidationMessageFor(m => m.ModelState["Error.Lobby.OnGetAsync.GetLudoData.Debug"])
@Html.ValidationMessageFor(m => m.ModelState["Error.Lobby.OnPost.NewGame.Debug.Debug"])


@* --- Create and Join Game form ------------------------ *@

<div class="row">
    <div class="col-md-4">
        @if (Model.Gameboard == null)
        {
            <h2>Create a new game:</h2>
        }
        else
        {
            <h2>Join the game (id: @Model.Gameboard.ID)</h2>
        }

        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="NewPlayer.PlayerName" class="control-label"></label>
                <input asp-for="NewPlayer.PlayerName" class="form-control" />
                <span asp-validation-for="NewPlayer.PlayerName" class="text-danger"></span>
            </div>
            <div class="form-group">
                @foreach (var colorTrack in Model.LudoData.ColorTracks)
                {
                    @if (colorTrack.Key == "Yellow")
                    {
                        <input type="radio" asp-for="NewPlayer.PlayerColor" value="@colorTrack.Key" id="color-radio-@colorTrack.Key" checked />
                    }
                    else
                    {
                        <input type="radio" asp-for="NewPlayer.PlayerColor" value="@colorTrack.Key" id="color-radio-@colorTrack.Key" />
                    }

                    <label asp-for="NewPlayer.PlayerColor" class="control-label" style="color:@colorTrack.Value.ColorHex" for="color-radio-@colorTrack.Key">@colorTrack.Key</label>
                }
                <span asp-validation-for="NewPlayer.PlayerColor" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
    <div class="col-md-4">
        @if (Model.Gameboard != null)
        {
            @* --- Draw "Start Game" button for the GameCreator ----- *@

            bool couldParsePlayerId = Int32.TryParse(Request.Cookies["PlayerID"], out int playerId);

            if (couldParsePlayerId && playerId == Model.Gameboard.GameCreator.ID)
            {
                <form method="post" asp-page-handler="StartGame">
                    <input type="submit" value="Start Game" class="btn btn-primary" />
                </form>
            }

            @* --- Draw table of Players currently in the game ------ *@

            <h2>Players in this game:</h2>
            <table>
                <tr>
                    <th>@Html.DisplayNameFor(m => m.Gameboard.Players[0].ID)</th>
                    <th>@Html.DisplayNameFor(m => m.Gameboard.Players[0].Name)</th>
                    <th>@Html.DisplayNameFor(m => m.Gameboard.Players[0].Color)</th>
                </tr>
                @foreach (var player in Model.Gameboard.Players)
                {
                    <tr>
                        <th>@player.ID</th>
                        <th>@player.Name</th>
                        <th>@player.Color</th>
                    </tr>
                }
            </table>
        }
    </div>
</div>


@* --- Scripts ------------------------------------------ *@

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
