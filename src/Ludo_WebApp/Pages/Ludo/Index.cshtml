@*Use this in production*@
@*@page "{id:int"*@
@*For development only*@
@page "{id:int?}"
@model Ludo_WebApp.Pages.Ludo.IndexModel
@(ViewData["Title"] = "Ludo Game")

@{
    /*-------------------------------------------------------------------------------------------------------------------*/
    /*--- [Start] DEBUG output ------------------------------------------------------------------------------------------*/

    if (Model.Request.Query.TryGetValue("successfullyJoined", out var successfullyJoined))
    {
        if (successfullyJoined.ToString() == "1")
        {
            <p>You succesfully joined!</p>
        }
    }

    if (Model.Request.Query.TryGetValue("gameSuccessfullyStarted", out var gameSuccessfullyStarted))
    {
        if (gameSuccessfullyStarted.ToString() == "1")
        {
            <p>The game has started!</p>
        }
    }

    if (Model.Request.Query.TryGetValue("DieRoll", out var dieRollString) && int.TryParse(dieRollString, out int dieRoll))
    {
        if (gameSuccessfullyStarted.ToString() == "1")
        {
            <p>Die roll: @dieRoll</p>
        }
    }

    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    /*--- [End] DEBUG output --------------------------------------------------------------------------------------------*/
    /*-------------------------------------------------------------------------------------------------------------------*/
}


@{
    if (Model.Gameboard == null)
    {
        <p>Error: gameboard is null</p>
    }
    else
    {
        bool couldParsePlayerId = Int32.TryParse(Request.Cookies["PlayerID"], out int playerId);

        #region Code moved to Ludo/Lobby
        @*
                    // If the game hasn't started:
                    if (Model.Gameboard.GameStartDate == null)
                    {
                        //string cookieValue = Request.Cookies["PlayerID"];-->

                //if (Int32.Parse() == Model.Gameboard.GameCreator.ID)


                // If the player is the one who started the game, show a "Star Game" button.
                if (couldParsePlayerId && playerId == Model.Gameboard.GameCreator.ID)
                {
                    /*-------------------------------------------------------------------------------------------------------------------*/
                    /*--- [START] Show "Start Game" button ------------------------------------------------------------------------------*/

                    @(// todo: only show this to the player who created the game.)
                    <form method="post" asp-page-handler="StartGame">
                        <input type="submit" value="Start Game" class="btn btn-primary" />
                    </form>

                    /*--- [END] Show "Start Game" button --------------------------------------------------------------------------------*/
                    /*-------------------------------------------------------------------------------------------------------------------*/

                }
                // If the player isn't the one who started the game and hasn't already joined the game, show a "join game form".
                else if (!(couldParsePlayerId && Model.Gameboard.Players.Any(p => p.ID == playerId)))
                {
                    /*-------------------------------------------------------------------------------------------------------------------*/
                    /*--- [START] Join Game form ----------------------------------------------------------------------------------------*/

                    @(// todo: don't show the "join game" section for the player who created the game.)
                    <h1>Join Game</h1>

                    <div class="row">
                        <div class="col-md-4">
                            <form asp-page-handler="AddPlayer" method="post">
                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                <!--<div class="form-group">
                                <label asp-for="NewGame.PlayerCount" class="control-label"></label>
                                <input asp-for="NewGame.PlayerCount" class="form-control" />-->
                                <!-- todo: switch to type="range"? -->
                                <!--<span asp-validation-for="NewGame.PlayerCount" class="text-danger"></span>
                                </div>-->
                                <div class="form-group">
                                    <label asp-for="NewPlayer.PlayerName" class="control-label"></label>
                                    <input asp-for="NewPlayer.PlayerName" class="form-control" />
                                    <span asp-validation-for="NewPlayer.PlayerName" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    @foreach (var color in Model.LudoData.ColorTracks)
                                    {
                                        <input type="radio" asp-for="NewPlayer.PlayerColor" value="@color.Key" id="color-radio-@color.Key" />
                                        <label asp-for="NewPlayer.PlayerColor" class="control-label" style="color:@color.Value.ColorHex" for="color-radio-@color.Key">@color.Key</label> <!-- todo: fix clicking labels always selects first radio-input -->
                                        <span asp-validation-for="NewPlayer.PlayerColor" class="text-danger"></span>
                                    }
                                    @if (Model.ColorError != null)
                                    {
                                        <span class="text-danger">@Model.ColorError</span>
                                    }
                                </div>
                                <div class="form-group">
                                    <input type="submit" value="Join" class="btn btn-primary" />
                                </div>
                            </form>
                        </div>
                    </div>

                    /*--- [END] Join Game form ------------------------------------------------------------------------------------------*/
                    /*-------------------------------------------------------------------------------------------------------------------*/
                }
            }
        *@
        #endregion

        // If the game has started:
        // else if (couldParsePlayerId && Model.Gameboard.Players.Any(p => p.ID == playerId))

        if (couldParsePlayerId && Model.Gameboard.Players.Any(p => p.ID == playerId))
        {
            <h2>It is @(Model.Gameboard.CurrentPlayer?.Name)'s (id: @Model.Gameboard.CurrentPlayer?.ID turn.</h2>


            // 2. Draw gameboard.
            //    todo: 3. Draw pieces on gameboard.
            //<div class="ludo-container col-md-9">
            <div class="ludo-container">

                @*-------------------------------------------------------------------------------------------------------------------*@
                @*--- [START] Draw the Gameboard-------------------------------------------------------------------------------------*@

                <div class="gameboard-container">
                    <div class="grid">
                        @for (int y = 0; y < Model.LudoData.GameboardMapIndices.Count; y++)
                        {
                            var rowOfIndices = Model.LudoData.GameboardMapIndices[y];

                            @for (int x = 0; x < rowOfIndices.Count; x++)
                            {
                                int squareIndex = rowOfIndices[x];

                                if (squareIndex == -1) // not a square
                                {
                                    <div class="cell"></div>
                                }
                                else if (squareIndex == -2) // "goal" square
                                {
                                    <div class="cell square nest-square"></div>
                                }
                                else if (squareIndex == -3) // "nest" square
                                {
                                    <div class="cell square nest-square"></div>
                                }
                                else if (squareIndex >= 0) // gameboard square
                                {
                                    char cellColorKey = Model.LudoData.GameboardMapColors[y][x];
                                    string cellColor;
                                    if (!Model.LudoData.ColorKeyMap.TryGetValue(cellColorKey, out cellColor))
                                    {
                                        // todo: error-handling
                                    }

                                    string id = $"square-{squareIndex}";
                                    List<string> classes = new() { "cell", "square" };

                                    if (cellColorKey == ' ') // shared square
                                    {
                                        id = "square-" + squareIndex;
                                    }
                                    else // goal-stretch square
                                    {
                                        if (!string.IsNullOrWhiteSpace(cellColor))
                                        {
                                            classes.Add($"{cellColor.ToLower()}-square");
                                        }

                                    }

                                    // Get square tenant:
                                    var tenant = Model.Gameboard.Squares?[squareIndex]?.Tenant;

                                    @if (tenant?.PieceCount > 0)
                                    {
                                        classes.Add($"piece-count-{tenant.PieceCount}");
                                        string pieceColor = tenant.Player.Color.ToLower();

                                        <div id="@id" class="@string.Join(' ', classes)">
                                            @if (tenant.PieceCount == 1)
                                            {
                                                <div class="@Html.Raw($"piece piece-color-{pieceColor}")"></div>
                                            }
                                            else if (tenant.PieceCount == 2)
                                            {
                                                <div class="@Html.Raw($"piece piece-color-{pieceColor}")"></div>
                                                <div class="@Html.Raw($"piece piece-color-{pieceColor}")"></div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div id="@id" class="@string.Join(' ', classes)">
                                            <span class="square-index-text">@squareIndex</span>
                                        </div>
                                    }
                                }
                            }
                        }
                    </div>
                </div>

                @*--- [END] Draw the Gameboard---------------------------------------------------------------------------------------*@
                @*-------------------------------------------------------------------------------------------------------------------*@


                @*-------------------------------------------------------------------------------------------------------------------*@
                @*--- [START] Draw gameplay options ("Roll Die"-button, menu with MoveActions) --------------------------------------*@

                @if (playerId == Model.Gameboard.CurrentPlayer.ID)
                {
                    <div class="options-container">

                        @if (Model.MoveActions == null)
                        {
                            @*// 4x. If dice has not been thrown: Draw button to throw the die.*@
                            <div class="form-group">
                                <form method="post" asp-page-handler="RollDie">
                                    @Html.HiddenFor(m => m.Gameboard.ID)
                                    @Html.HiddenFor(m => m.Gameboard.CurrentPlayer.ID)
                                    <input type="submit" value="Roll die" class="btn btn-primary" />
                                </form>
                            </div>
                        }
                        else // Model.MoveActions != null
                        {
                            @*
                                todo:
                                4x. If dice been throw: Draw draw menu of MoveActions (and form with submit button).
                                    4a. (Javascript) check if MoveAction is valid and alert if it isn't and stop form POST submit.
                                        use something like the following to stop the data from being submitted:
                                        ```javascript
                                        form.onSubmit = e => {
                                            if (invalid MoveAction) {
                                                e.preventDefault();
                                                return false;
                                            }ChooseMoveAction
                                        }
                                        ```
                                    4b. (Javascript) allow form POST to execute.
                            *@
                            <div>
                                You rolled a @(Model.DieRoll).
                            </div>
                            <div class="form-group">
                                <form method="post" asp-page-handler="ChooseMoveAction" asp-for="OnPostChooseMoveActionAsync">
                                    <div class="form-group">
                                        <label @* asp-for="" *@ class="control-label" for="TEMPATTRIBUTE_select_piece" style="display: block; color: #fff">Move piece on square:</label>
                                        <span @* asp-validation-for="" *@ class="text-danger" name="TEMPATTRIBUTE_select_piece"></span>
                                        @Html.HiddenFor(m => m.Gameboard.ID)
                                        <select size="4" asp-for="ChosenMoveActionId">
                                            @foreach (var moveAction in Model.MoveActions)
                                            {
                                                <option value="@moveAction.Id">@moveAction.OptionText</option>
                                            }
                                        </select>
                                        <input type="submit" value="Choose Move Action" class="btn btn-primary" />
                                    </div>
                                </form>
                            </div>
                        }
                    </div>

                    @*
                        todo: 4x.If MoveActions has been chosen:
                    *@
                }
                else
                {
                    @*
                        4x. Draw "Waiting for {playerName}."?
                        4x. Draw button to reload page?
                        4x. SignalR?
                            1. Send signalR message asking for Gameboard.CurrentPlayer.
                            1. Listen for signalR message when it's the next player's turn / same player but new turn (when player rolls a 6).
                    *@
                }

                @*--- [END] Draw gameplay options ("Roll Die"-button, menu with MoveActions) --------------------------------------*@
                @*-------------------------------------------------------------------------------------------------------------------*@

            </div>
        }
        else // The person is not one of the players attached to the game.
        {
            // todo: redirect to start?
        }
    }
}


@* --- Scripts ------------------------------------------ *@

@section scripts{
    <partial name="_ValidationScriptsPartial" />
}

<script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
<script src="~/js/ludo.js"></script>
@*
        @if Model.Gameboard.
        <script type="text/javascript">
            $(function () {
                setInterval
            })
        </script>
    <script type="text/javascript">
        $(function () {
            setInterval
        })
    </script>
*@
