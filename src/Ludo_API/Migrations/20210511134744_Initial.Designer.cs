// <auto-generated />
using System;
using Ludo_API.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ludo_API.Migrations
{
    [DbContext(typeof(LudoContext))]
    [Migration("20210511134744_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ludo_API.Models.Gameboard", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("GameDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastPlayerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LastPlayerID");

                    b.ToTable("Gameboards");
                });

            modelBuilder.Entity("Ludo_API.Models.Player", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColorArgb")
                        .HasColumnType("int");

                    b.Property<int?>("GameboardID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GameboardID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Ludo_API.Models.Square", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("GameboardId")
                        .HasColumnType("int");

                    b.Property<int?>("OccupiedByID")
                        .HasColumnType("int");

                    b.Property<int?>("PieceCount")
                        .HasColumnType("int");

                    b.HasKey("ID", "GameboardId");

                    b.HasIndex("GameboardId");

                    b.HasIndex("OccupiedByID");

                    b.ToTable("Squares");
                });

            modelBuilder.Entity("Ludo_API.Models.Gameboard", b =>
                {
                    b.HasOne("Ludo_API.Models.Player", "LastPlayer")
                        .WithMany()
                        .HasForeignKey("LastPlayerID");

                    b.Navigation("LastPlayer");
                });

            modelBuilder.Entity("Ludo_API.Models.Player", b =>
                {
                    b.HasOne("Ludo_API.Models.Gameboard", null)
                        .WithMany("Players")
                        .HasForeignKey("GameboardID");
                });

            modelBuilder.Entity("Ludo_API.Models.Square", b =>
                {
                    b.HasOne("Ludo_API.Models.Gameboard", "Gameboard")
                        .WithMany("Squares")
                        .HasForeignKey("GameboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ludo_API.Models.Player", "OccupiedBy")
                        .WithMany()
                        .HasForeignKey("OccupiedByID");

                    b.Navigation("Gameboard");

                    b.Navigation("OccupiedBy");
                });

            modelBuilder.Entity("Ludo_API.Models.Gameboard", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Squares");
                });
#pragma warning restore 612, 618
        }
    }
}
